/*--------------------------------*- C++ -*----------------------------------*\
|                                                                             |
|                Generated by the CfdOF workbench for FreeCAD                 |
|                  https://gitlab.com/opensimproject/CfdOF                    |
|                                                                             |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       dictionary;
    object      fvSchemes;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

fluxScheme          AUSMPlusUp;


ddtSchemes
{
    default         bounded dualTime rPseudoDeltaT steadyState;
}

divSchemes
{
    default         none;
    // Use second-order accurate convection
    // Bounded schemes for steady-state solution
    div(phi,U)      bounded Gauss linearUpwindV grad(U);
    div((nuEff*dev2(T(grad(U))))) Gauss linear;
    div(div(phi,U)) Gauss linear;
    div(phi,k)      bounded Gauss upwind;
    div(phi,omega)  bounded Gauss upwind;
    div(tauMC)      Gauss linear;
    div(yPhi,yWall) Gauss linearUpwind grad(yWall);
}

gradSchemes
{
    // Limit gradient to improve stability when bad cells encountered
    // (0 = no limiting; 1 = do not exceed surrounding cells)
    default         cellLimited faceLeastSquares linear 0.6;
    gradTvd         cellLimited faceLeastSquares linear 0.6;
    grad(k)         cellLimited Gauss linear 0.9;
    grad(omega)     cellLimited Gauss linear 0.9;
}

laplacianSchemes
{
    // Limited explicit correction to the surface normal gradient,
    // for stability in highly non-orthogonal cells.
    // (0 = uncorrected, fully implicit; 1 = full correction)
    default                     Gauss linear corrected;
    laplacian(muEff,U)          Gauss linear compact;
    laplacian(alphaEff,e)       Gauss linear compact;
    laplacian(yPsi)             Gauss linear corrected;
}

interpolationSchemes
{
    default         linear;
    reconstruct(rho) wVanLeer gradTvd;
    reconstruct(U)   wVanLeer gradTvd;
    reconstruct(T)   wVanLeer gradTvd;
}

snGradSchemes
{
    // Limited explicit correction to the surface normal gradient,
    // for stability in highly non-orthogonal cells.
    // (0 = uncorrected, fully implicit; 1 = full correction)
    default         limited 0.3;
}

wallDist
{
    method    Poisson;
    epsilon   0.1;     // Smaller = more accurate but less stable
    tolerance 1e-5;
    maxIter   10;
}


// ************************************************************************* //
