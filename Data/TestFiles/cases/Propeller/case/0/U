/*--------------------------------*- C++ -*----------------------------------*\
|                                                                             |
|                Generated by the CfdOF workbench for FreeCAD                 |
|                      https://github.com/jaheyns/CfdOF                       |
|                                                                             |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       volVectorField;
    object      U;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

dimensions      [0 1 -1 0 0 0 0];

internalField   uniform (0.0 0.0 0.0);

boundaryField
{
    // Foundation:
    
    nonConformalCyclic_on_MeshRefinement_M 
    {
        type    nonConformalCyclic;
        value   $internalField;
    }

    nonConformalError_on_MeshRefinement_M
    {
        type    nonConformalError;
    }

    nonConformalCyclic_on_MeshRefinement_S 
    {
        type    nonConformalCyclic;
        value   $internalField;
    }

    nonConformalError_on_MeshRefinement_S
    {
        type    nonConformalError;
    }


    MeshRefinement_M 
    {
        #include "MMR/vector";
    }
    MeshRefinement_S 
    {
        #include "MMR/vector";
    }


    inlet
    {
        // Fix all three components of velocity on inflow and only the normal component on outflow,
        // in order to be well-posed if there are some faces on the patch which are actually outflows.
        type                fixedNormalInletOutletVelocity;
        fixTangentialInflow yes;
        normalVelocity
        {
            type            fixedValue;
            value           uniform ( 0.0 0.0 -1.0 );
        }
        value               uniform ( 0.0 0.0 -1.0 );
    }

    outlet
    {
        type        pressureInletOutletVelocity;
        value       $internalField;
    }

    wall
    {
        // movingWallVelocity reduces to fixedValue if the mesh is not moving
        type        movingWallVelocity;
        value       uniform (0 0 0);
    }

    wall001
    {
        // movingWallVelocity reduces to fixedValue if the mesh is not moving
        type        movingWallVelocity;
        value       uniform (0 0 0);
    }

    defaultFaces
    {
        // movingWallVelocity reduces to fixedValue if the mesh is not moving
        type        movingWallVelocity;
        value       uniform (0 0 0);
    }

}

// ************************************************************************* //
